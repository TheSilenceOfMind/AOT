Computer software
Software is a program that enables a computer to perform a specific task, as opposed to the physical components of the system (hardware).
This includes application software such as a word processor, which enables a user to perform a task, and system software such as an operating system, which enables other software to run properly, by interfacing with hardware and with other software.
Practical computer systems divide software into three major classes: system software, programming software and application software, although the distinction is arbitrary, and often blurred.
Computer software has to be "loaded" into the computer's storage (such as a hard drive, memory, or RAM).
Once the software is loaded, the computer is able to execute the software.
Computers operate by executing the computer program.
This involves passing instructions from the application software, through the system software, to the hardware which ultimately receives the instruction as machine code.
Each instruction causes the computer to carry out an operation moving data, carrying out a computation, or altering the control flow of instructions.
Computer software is a program that enables a computer to perform a specific task, as opposed to the physical components of the system (hardware). This includes application software such as a word processor, which enables a user to perform a task, and system software such as an operating system, which enables other software to run properly, by interfacing with hardware and with other software.
The term "software" was first used in this sense by John W. Tukey in 1957. In computer science and software engineering, computer software is all computer programs. The concept of reading different sequences of instructions into the memory of a device to control computations was invented by Charles Babbage as part of his difference engine. The theory that is the basis for most modern software was first proposed by Alan Turing in his 1935 essay, Computable Numbers with an Application to the Entscheidungsproblem.
Software has historically been considered an intermediary between electronic hardware and data, which are defined by the instructions defined by the software. As computational math becomes increasingly complex, the distinction between software and data becomes less precise. Data has generally been considered as either the output or input of executed software. However, data is not the only possible output or input. For example, (system) configuration information may also be considered input, although not necessarily considered data (and certainly not applications data). The output of a particular piece of executed software may be the input for another executed piece of software. Therefore, software may be considered an interface between hardware, data, and/or (other) software. 
Types
Practical computer systems divide software into three major classes: System software, programming software, and application software, although the distinction is arbitrary and often blurred. 
System software helps run the computer hardware and computer system. It includes operating systems, device drivers, diagnostic tools, servers, windowing systems, utilities, and more. The purpose of systems software is to insulate the applications programmer as much as possible from the details of the particular computer complex being used, especially memory and other hardware features, and such accessory devices as communications, printers, readers, displays, keyboards, etc.
Programming software usually provides tools to assist a programmer in writing computer programs and software using different programming languages in a more convenient way. The tools include text editors, compilers, interpreters, linkers, debuggers, and so on. An Integrated development environment (IDE) merges those tools into a software bundle, and a programmer may not need to type multiple commands for compiling, interpreter, debugging, tracing, and etc., because the IDE usually has an advanced graphical user interface (GUI).
Application software allows humans to accomplish one or more specific (non-computer related) tasks. Typical applications include industrial automation, business software, educational software, medical software, databases, and computer games. Businesses are probably the biggest users of application software, but almost every field of human activity now uses some form of application software. It is used to automate all sorts of functions.
Computer viruses
Computer viruses are a malignant type of computer program even though they might not be considered software. They can be created as any of the three types of software. Some viruses cause minor problems, such as slowing down a computer or using email to spread. Other viruses can cause more serious problems, such as destroying data or damaging hardware. 
Relationship to hardware
Computer software is so called in contrast to computer hardware, which encompasses the physical interconnections and devices required to store and execute (or run) the software. In computers, software is loaded into random access memory (RAM) and executed in the central processing unit. At the lowest level, software consists of a machine language specific to an individual processor. The machine language consists of groups of binary values signifying processor instructions (object code), which change the state of the computer from its preceding state. 
Software is an ordered sequence of instructions for changing the state of the computer hardware in a particular sequence. It is usually written in high-level programming languages that are easier and more efficient for humans to use (closer to natural language) than machine language. High-level languages are compiled or interpreted into machine language object code. Software may also be written in an assembly language, essentially, a mnemonic representation of a machine language using a natural language alphabet. Assembly language must be assembled into object code via an assembler. 